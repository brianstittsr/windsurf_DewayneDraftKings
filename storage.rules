rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function getUserRole() {
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return getUserRole() == 'PLATFORM_ADMIN';
    }
    
    function isValidImageType() {
      return resource.contentType.matches('image/.*');
    }
    
    function isValidFileSize() {
      return resource.size < 5 * 1024 * 1024; // 5MB limit
    }

    // User avatars
    match /avatars/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                     (isOwner(userId) || isAdmin()) &&
                     isValidImageType() &&
                     isValidFileSize();
      allow delete: if isOwner(userId) || isAdmin();
    }

    // Team avatars
    match /team-avatars/{teamId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                     isValidImageType() &&
                     isValidFileSize();
      allow delete: if isAdmin();
    }

    // QR codes for player metrics
    match /qr-codes/{userId}/{allPaths=**} {
      allow read: if true; // QR codes should be publicly readable
      allow write: if isAuthenticated() && 
                     (isOwner(userId) || isAdmin());
      allow delete: if isOwner(userId) || isAdmin();
    }

    // General uploads (workout images, etc.)
    match /uploads/{userId}/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                     isOwner(userId) &&
                     isValidFileSize();
      allow delete: if isOwner(userId) || isAdmin();
    }
  }
}
