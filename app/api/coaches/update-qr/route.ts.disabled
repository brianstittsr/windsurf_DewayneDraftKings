import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  // Return early during build time to prevent execution
  if (typeof window === 'undefined' && !globalThis.fetch) {
    return NextResponse.json(
      { success: false, error: 'Service unavailable during build' },
      { status: 503 }
    );
  }

  try {
    const body = await request.json();
    const { coachId, qrCode, qrCodeUrl } = body;

    if (!coachId || !qrCode || !qrCodeUrl) {
      return NextResponse.json(
        { success: false, error: 'Coach ID, QR code, and QR code URL are required' },
        { status: 400 }
      );
    }

    // Dynamic imports only after runtime checks
    const [firebaseModule, firestoreModule, schemaModule] = await Promise.all([
      import('@/lib/firebase').catch(() => null),
      import('firebase/firestore').catch(() => null),
      import('@/lib/firestore-schema').catch(() => null)
    ]);

    if (!firebaseModule?.db || !firestoreModule || !schemaModule) {
      return NextResponse.json(
        { success: false, error: 'Database services unavailable' },
        { status: 503 }
      );
    }

    const { doc, updateDoc } = firestoreModule;
    const { COLLECTIONS } = schemaModule;

    await updateDoc(doc(firebaseModule.db, COLLECTIONS.COACHES, coachId), {
      qrCode,
      qrCodeUrl,
      updatedAt: new Date()
    });

    return NextResponse.json({
      success: true,
      message: 'Coach QR code updated successfully'
    });
  } catch (error) {
    console.error('Error updating coach QR code:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update coach QR code' },
      { status: 500 }
    );
  }
}
